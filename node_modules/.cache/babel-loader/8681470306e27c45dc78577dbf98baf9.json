{"ast":null,"code":"import _defineProperty from \"/home/swomfire/Documents/swomfire/my-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/swomfire/Documents/swomfire/my-test/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport * as JsDiff from 'diff';\nimport './App.css';\nimport { Tooltip } from 'antd';\n\nfunction App() {\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(Popup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }));\n}\n\nexport default App;\nvar colors = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D', '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC', '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399', '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933', '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\nexport class Popup extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // text: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.',\n      // finalText: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.',\n      text: '',\n      finalText: '',\n      log: [],\n      selectedIndex: null\n    };\n\n    this.onChange = e => {\n      const value = e.target.value;\n      this.setState({\n        text: value\n      });\n    };\n\n    this.onSave = () => {\n      const _this$state = this.state,\n            text = _this$state.text,\n            finalText = _this$state.finalText,\n            log = _this$state.log;\n\n      const _ref = log[log.length - 1] || {},\n            _ref$addLog = _ref.addLog,\n            addLog = _ref$addLog === void 0 ? [] : _ref$addLog;\n\n      const changes = JsDiff.diffWords(finalText, text, {\n        ignoreWhitespace: false\n      });\n      let index = 0;\n      let changeLog = [];\n      changes.forEach(change => {\n        const value = change.value,\n              added = change.added,\n              removed = change.removed;\n\n        if (added) {\n          changeLog = changeLog.concat({\n            type: 'add',\n            value,\n            index\n          });\n          return;\n        }\n\n        if (removed) {\n          changeLog = changeLog.concat({\n            type: 'remove',\n            value,\n            index\n          });\n          return;\n        }\n\n        index += value.length;\n      });\n      const newAddLog = this.compressLog(addLog, changeLog, log.length + 1);\n      this.setState({\n        log: changeLog.length !== 0 ? log.concat({\n          text: finalText,\n          changeLog,\n          addLog: newAddLog\n        }) : log,\n        finalText: text\n      });\n    };\n\n    this.selectIndex = index => {\n      this.setState({\n        selectedIndex: index\n      });\n    };\n\n    this.unselectIndex = () => {\n      this.setState({\n        selectedIndex: null\n      });\n    };\n\n    this.shiftIndex = (array, startIndex, shift) => array.map(item => {\n      const index = item.index;\n      return _objectSpread({}, item, {\n        index: index >= startIndex ? index + shift : index\n      });\n    });\n\n    this.compressLog = (lastLog, changeLog, index) => {\n      let result = lastLog; // console.log({ changeLog })\n\n      let sorted = changeLog;\n\n      for (let i = 0; i < sorted.length; i++) {\n        console.log({\n          changeLog\n        });\n        const _sorted$i = sorted[i],\n              type = _sorted$i.type,\n              value = _sorted$i.value,\n              startAt = _sorted$i.index;\n        let shift = 0;\n\n        if (type === 'add') {\n          const existBlock = result.find(({\n            index: resultIndex,\n            value: resultValue\n          }) => {\n            return startAt < resultIndex || resultIndex + +resultValue.length > startAt;\n          }); // console.log(existBlock)\n\n          if (existBlock) {\n            let tmp = [];\n            result.forEach(block => {\n              const blockIndex = block.index,\n                    blockValue = block.value;\n\n              if (blockIndex === existBlock.index) {\n                const firstHalf = blockValue.substring(0, startAt - blockIndex);\n                const secondHalf = blockValue.substring(startAt - blockIndex, blockValue.length);\n                let insertBlocks = [];\n\n                if (firstHalf !== \"\") {\n                  insertBlocks = insertBlocks.concat(_objectSpread({}, block, {\n                    index: blockIndex,\n                    value: firstHalf\n                  }));\n                }\n\n                const changeBlock = {\n                  index: firstHalf !== \"\" ? blockIndex + firstHalf.length : blockIndex,\n                  value,\n                  from: index\n                };\n                insertBlocks = insertBlocks.concat(changeBlock);\n\n                if (secondHalf !== \"\") {\n                  insertBlocks = insertBlocks.concat(_objectSpread({}, block, {\n                    index: blockIndex + value.length + (firstHalf !== \"\" ? firstHalf.length : 0),\n                    value: secondHalf\n                  }));\n                } // console.log(insertBlocks)\n\n\n                tmp = tmp.concat(insertBlocks);\n              } else {\n                tmp = tmp.concat(_objectSpread({}, block, {\n                  index: blockIndex >= existBlock.index ? blockIndex + value.length : blockIndex\n                }));\n              }\n            });\n            result = tmp;\n          } else {\n            const resultIndex = result.length !== 0 ? result[result.length - 1].index + result[result.length - 1].value.length : 0;\n            result = result.concat({\n              index: resultIndex,\n              value,\n              from: index\n            });\n          }\n\n          shift += value.length;\n        }\n\n        if (type === 'remove') {\n          // console.log({ result })\n          const endIndex = startAt + value.length;\n          let existBlocks = result.filter(({\n            index: resultIndex,\n            value: resultValue\n          }) => {\n            const start = resultIndex;\n            const end = resultIndex + resultValue.length;\n            return start <= startAt && end > startAt || start <= endIndex && end > endIndex || start >= startAt && end <= endIndex;\n          }); // console.log({ existBlocks })\n\n          if (existBlocks.length > 0) {\n            // eslint-disable-next-line no-loop-func\n            existBlocks.forEach(block => {\n              const blockIndex = block.index,\n                    blockValue = block.value;\n              const start = startAt - blockIndex;\n              const end = endIndex - blockIndex;\n              const finalValue = blockValue.substring(0, start) + blockValue.substring(end, blockValue.length + 1); // console.log({ blockIndex, blockValue, finalValue, start, end, startAt, endIndex })\n\n              let tmp = [];\n              const removedCount = blockValue.length - finalValue.length;\n              result.forEach(resultBlock => {\n                let changeBlock = null; // console.log({ a: resultBlock.index, blockIndex, removedFromExistBlock, tru: resultBlock.index === blockIndex - removedFromExistBlock })\n\n                if (resultBlock.index === blockIndex + shift) {\n                  if (finalValue !== \"\") {\n                    changeBlock = {\n                      index: resultBlock.index,\n                      value: finalValue,\n                      from: resultBlock.from\n                    };\n                  }\n                } else if (resultBlock.index > blockIndex + shift) {\n                  const newIndex = resultBlock.index - removedCount;\n                  changeBlock = {\n                    index: newIndex,\n                    value: resultBlock.value,\n                    from: resultBlock.from\n                  };\n                } else {\n                  changeBlock = {\n                    index: resultBlock.index,\n                    value: resultBlock.value,\n                    from: resultBlock.from\n                  };\n                } // console.log(changeBlock, removedFromExistBlock, removedCount)\n\n\n                if (changeBlock !== null) {\n                  tmp = tmp.concat(changeBlock);\n                }\n              });\n              shift -= removedCount;\n              result = tmp;\n            }); // console.log({ result });\n          }\n        } // shift = type === 'add' ? value.length : value.length * -1;\n        // sorted = sorted.map(sort => ({ ...sort, index: sort.index > startAt ? sort.index + shift : sort.index }))\n\n\n        console.log(result);\n      }\n\n      return result;\n    };\n\n    this.renderLogString = () => {\n      const _this$state2 = this.state,\n            finalText = _this$state2.finalText,\n            log = _this$state2.log,\n            selectedIndex = _this$state2.selectedIndex;\n      const _log$selectedIndex = log[selectedIndex],\n            changeLog = _log$selectedIndex.changeLog,\n            text = _log$selectedIndex.text;\n      let result = text;\n      changeLog.sort((a, b) => b.index - a.index).forEach(change => {\n        const type = change.type,\n              value = change.value,\n              index = change.index;\n        const header = type === \"add\" ? '<span style=\"color: green;\">' : '<span style=\"color: red;\">';\n        result = result.substring(0, index) + header + value + '</span>' + result.substring(type === 'add' ? index : index + +value.length);\n      });\n      return result;\n    };\n\n    this.renderFinalLog = () => {\n      const _this$state3 = this.state,\n            finalText = _this$state3.finalText,\n            log = _this$state3.log;\n      const content = log.length > 0 ? log[log.length - 1].addLog.sort((a, b) => a.index - b.index).map(({\n        index: itemIndex,\n        value,\n        from\n      }, index) => React.createElement(\"span\", {\n        key: itemIndex,\n        style: {\n          color: colors[from - 1]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, value)) : finalText;\n      return content;\n    };\n  }\n\n  render() {\n    const _this$state4 = this.state,\n          text = _this$state4.text,\n          log = _this$state4.log,\n          selectedIndex = _this$state4.selectedIndex;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      onMouseOut: this.unselectIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, log.map((value, index) => React.createElement(\"li\", {\n      style: {\n        color: colors[index]\n      },\n      onMouseEnter: () => this.selectIndex(index),\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"Log \", index))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), selectedIndex === null ? this.renderFinalLog() : React.createElement(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: this.renderLogString()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      onChange: this.onChange,\n      value: text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.onSave,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["/home/swomfire/Documents/swomfire/my-test/src/App.js"],"names":["React","Component","JsDiff","Tooltip","App","colors","Popup","state","text","finalText","log","selectedIndex","onChange","e","value","target","setState","onSave","length","addLog","changes","diffWords","ignoreWhitespace","index","changeLog","forEach","change","added","removed","concat","type","newAddLog","compressLog","selectIndex","unselectIndex","shiftIndex","array","startIndex","shift","map","item","lastLog","result","sorted","i","console","startAt","existBlock","find","resultIndex","resultValue","tmp","block","blockIndex","blockValue","firstHalf","substring","secondHalf","insertBlocks","changeBlock","from","endIndex","existBlocks","filter","start","end","finalValue","removedCount","resultBlock","newIndex","renderLogString","sort","a","b","header","renderFinalLog","content","itemIndex","color","render","__html"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as JsDiff from 'diff';\nimport './App.css';\nimport { Tooltip } from 'antd';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Popup />\n    </div>\n  );\n}\n\nexport default App;\n\nvar colors = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6',\n  '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\n  '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\n  '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\n  '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC',\n  '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\n  '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680',\n  '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\n  '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3',\n  '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\n\nexport class Popup extends Component {\n  state = {\n    // text: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.',\n    // finalText: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.',\n    text: '',\n    finalText: '',\n    log: [],\n    selectedIndex: null,\n  }\n\n  onChange = (e) => {\n    const { value } = e.target;\n    this.setState({\n      text: value,\n    })\n  }\n\n  onSave = () => {\n    const { text, finalText, log } = this.state;\n    const { addLog = [] } = log[log.length - 1] || {};\n    const changes = JsDiff.diffWords(finalText, text, { ignoreWhitespace: false });\n    let index = 0;\n    let changeLog = [];\n    changes.forEach(change => {\n      const { value, added, removed } = change;\n      if (added) {\n        changeLog = changeLog.concat({\n          type: 'add',\n          value,\n          index,\n        });\n        return;\n      }\n      if (removed) {\n        changeLog = changeLog.concat({\n          type: 'remove',\n          value,\n          index,\n        });\n        return;\n      }\n      index += value.length;\n    });\n    const newAddLog = this.compressLog(addLog, changeLog, log.length + 1);\n    this.setState({\n      log: changeLog.length !== 0 ? log.concat({ text: finalText, changeLog, addLog: newAddLog }) : log,\n      finalText: text,\n    })\n  }\n\n  selectIndex = (index) => {\n    this.setState({\n      selectedIndex: index,\n    })\n  }\n\n  unselectIndex = () => {\n    this.setState({\n      selectedIndex: null,\n    })\n  }\n\n  shiftIndex = (array, startIndex, shift) => array.map(item => {\n    const { index } = item;\n    return {\n      ...item,\n      index: index >= startIndex ? index + shift : index,\n    }\n  })\n\n  compressLog = (lastLog, changeLog, index) => {\n    let result = lastLog;\n    // console.log({ changeLog })\n    let sorted = changeLog\n    for (let i = 0; i < sorted.length; i++) {\n      console.log({ changeLog })\n      const { type, value, index: startAt } = sorted[i];\n      let shift = 0;\n      if (type === 'add') {\n        const existBlock = result.find(({ index: resultIndex, value: resultValue }) => {\n          return startAt < resultIndex ||\n            (resultIndex + +resultValue.length > startAt)\n        }\n        );\n        // console.log(existBlock)\n        if (existBlock) {\n          let tmp = [];\n          result.forEach(block => {\n            const { index: blockIndex, value: blockValue } = block;\n            if (blockIndex === existBlock.index) {\n              const firstHalf = blockValue.substring(0, startAt - blockIndex);\n              const secondHalf = blockValue.substring(startAt - blockIndex, blockValue.length);\n              let insertBlocks = [];\n              if (firstHalf !== \"\") {\n                insertBlocks = insertBlocks.concat({\n                  ...block,\n                  index: blockIndex,\n                  value: firstHalf,\n                });\n              }\n              const changeBlock = {\n                index: firstHalf !== \"\" ? blockIndex + firstHalf.length : blockIndex,\n                value,\n                from: index,\n              }\n              insertBlocks = insertBlocks.concat(changeBlock);\n              if (secondHalf !== \"\") {\n                insertBlocks = insertBlocks.concat({\n                  ...block,\n                  index: blockIndex + value.length + (firstHalf !== \"\" ? firstHalf.length : 0),\n                  value: secondHalf,\n                });\n              }\n              // console.log(insertBlocks)\n              tmp = tmp.concat(insertBlocks);\n            } else {\n              tmp = tmp.concat({\n                ...block,\n                index: blockIndex >= existBlock.index ? blockIndex + value.length : blockIndex,\n              });\n            }\n          });\n          result = tmp;\n        } else {\n          const resultIndex = result.length !== 0 ? result[result.length - 1].index + result[result.length - 1].value.length : 0;\n          result = result.concat({\n            index: resultIndex,\n            value,\n            from: index,\n          });\n        }\n        shift += value.length;\n      }\n      if (type === 'remove') {\n        // console.log({ result })\n        const endIndex = startAt + value.length;\n        let existBlocks = result.filter(({ index: resultIndex, value: resultValue }) => {\n          const start = resultIndex;\n          const end = resultIndex + resultValue.length;\n          return (start <= startAt && end > startAt)\n            || (start <= endIndex && end > endIndex)\n            || (start >= startAt && end <= endIndex)\n        });\n        // console.log({ existBlocks })\n        if (existBlocks.length > 0) {\n          // eslint-disable-next-line no-loop-func\n          existBlocks.forEach((block) => {\n            const { index: blockIndex, value: blockValue } = block;\n            const start = startAt - blockIndex;\n            const end = endIndex - blockIndex;\n            const finalValue = blockValue.substring(0, start) + blockValue.substring(end, blockValue.length + 1);\n            // console.log({ blockIndex, blockValue, finalValue, start, end, startAt, endIndex })\n            let tmp = [];\n            const removedCount = blockValue.length - finalValue.length;\n            result.forEach(resultBlock => {\n              let changeBlock = null;\n              // console.log({ a: resultBlock.index, blockIndex, removedFromExistBlock, tru: resultBlock.index === blockIndex - removedFromExistBlock })\n              if (resultBlock.index === blockIndex + shift) {\n                if (finalValue !== \"\") {\n                  changeBlock = {\n                    index: resultBlock.index,\n                    value: finalValue,\n                    from: resultBlock.from,\n                  };\n                }\n              } else if (resultBlock.index > blockIndex + shift) {\n                const newIndex = resultBlock.index - removedCount;\n                changeBlock = {\n                  index: newIndex,\n                  value: resultBlock.value,\n                  from: resultBlock.from,\n                };\n              } else {\n                changeBlock = {\n                  index: resultBlock.index,\n                  value: resultBlock.value,\n                  from: resultBlock.from,\n                };\n              }\n              // console.log(changeBlock, removedFromExistBlock, removedCount)\n              if (changeBlock !== null) {\n                tmp = tmp.concat(changeBlock);\n              }\n            });\n            shift -= removedCount;\n            result = tmp;\n          })\n          // console.log({ result });\n        }\n      }\n      // shift = type === 'add' ? value.length : value.length * -1;\n      // sorted = sorted.map(sort => ({ ...sort, index: sort.index > startAt ? sort.index + shift : sort.index }))\n      console.log(result);\n    }\n    return result;\n  }\n\n  renderLogString = () => {\n    const { finalText, log, selectedIndex } = this.state;\n    const { changeLog, text } = log[selectedIndex];\n    let result = text;\n    changeLog.sort((a, b) => b.index - a.index).forEach(change => {\n      const { type, value, index } = change;\n      const header = type === \"add\" ? '<span style=\"color: green;\">' : '<span style=\"color: red;\">';\n      result = result.substring(0, index) + header + value + '</span>' + result.substring(type === 'add' ? index : index + +value.length);\n    })\n    return result;\n  }\n\n  renderFinalLog = () => {\n    const { finalText, log } = this.state;\n    const content = log.length > 0 ? log[log.length - 1].addLog.sort((a, b) => a.index - b.index).map(({ index: itemIndex, value, from }, index) => (\n      <span key={itemIndex} style={{ color: colors[from - 1] }}>\n        {value}\n      </span>\n    )) : finalText;\n    return content;\n  }\n\n  render() {\n    const { text, log, selectedIndex } = this.state;\n    return (\n      <div>\n        <ul onMouseOut={this.unselectIndex}>\n          {log.map((value, index) => <li style={{ color: colors[index] }} onMouseEnter={() => this.selectIndex(index)} key={index}>Log {index}</li>)}\n        </ul>\n        <br />\n        {selectedIndex === null ? this.renderFinalLog() : (<div dangerouslySetInnerHTML={{ __html: this.renderLogString() }} />)}\n        <br />\n        <textarea onChange={this.onChange} value={text} />\n        <button type=\"button\" onClick={this.onSave}>Save</button>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}